" Vundle  PluginSettings  Settings  GUI  Keybindings
" |_press * on one of the sections to go there
"###############################################################################
"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
"       _                       _
" __   _(_)_ __ ___        _ __ | |_   _  __ _
" \ \ / / | '_ ` _ \ _____| '_ \| | | | |/ _` |
"  \ V /| | | | | | |_____| |_) | | |_| | (_| |
"   \_/ |_|_| |_| |_|     | .__/|_|\__,_|\__, |
"                         |_|            |___/
"
"
"
"###############################################################################
"Vundle||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'FuzzyFinder'
Plug 'L9'

Plug 'dietsche/vim-lastplace'
Plug 'jmcantrell/vim-virtualenv'
Plug 'kassio/neoterm'
Plug 'jpalardy/vim-slime'
Plug 'thinca/vim-quickrun'
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'chrisbra/Colorizer'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'godlygeek/csapprox'
Plug 'godlygeek/tabular'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'

Plug 'jiangmiao/auto-pairs'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'bronson/vim-trailing-whitespace'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/vim-xmark', { 'do': 'make' }
Plug 'junegunn/seoul256.vim'

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'dbakker/vim-lint'

Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer'}
Plug 'rdnetto/YCM-Generator'

Plug 'JuliaLang/julia-vim'

Plug 'vim-perl/vim-perl'

Plug 'vim-ruby/vim-ruby'

Plug 'vim-scripts/applescript.vim'

Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'Quramy/tsuquyomi'

Plug 'terryma/vim-multiple-cursors'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'justinmk/vim-syntax-extra'

Plug 'itchyny/vim-haskell-indent'
"Plug 'urso/haskell_syntax.vim'
Plug 'eagletmt/ghcmod-vim'
Plug 'eagletmt/neco-ghc'

Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'

Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'majutsushi/tagbar'
"Plug 'JamshedVesuna/vim-markdown-preview'

call plug#end()
filetype plugin indent on
syntax on

"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################

"###############################################################################
"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
"        _             _                  _   _   _
"  _ __ | |_   _  __ _(_)_ __    ___  ___| |_| |_(_)_ __   __ _ ___
" | '_ \| | | | |/ _` | | '_ \  / __|/ _ \ __| __| | '_ \ / _` / __|
" | |_) | | |_| | (_| | | | | | \__ \  __/ |_| |_| | | | | (_| \__ \
" | .__/|_|\__,_|\__, |_|_| |_| |___/\___|\__|\__|_|_| |_|\__, |___/
" |_|            |___/                                    |___/
"
"
"###############################################################################
"PluginSettings||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
"start an autocmd group for vimrc and clear it, so that you can
"source your vimrc after you've changed it. And not have your
"autocmd's defined multiple times.
augroup vimrc_group
    autocmd!
augroup END

let vim_markdown_preview_hotkey='<localleader>p'
let vim_markdown_preview_github=1

" VIM-SLIME
let g:slime_python_ipython = 1
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
let g:slime_dont_ask_default = 1

"NEOTERM
let g:neoterm_keep_term_open = 1
let g:neoterm_automap_keys = '<localleader>tt'

" NERDTREE
let NERDTreeHijackNetrw=1
let NERDTreeQuitOnOpen=1

" AUTO-PAIRS
" auto-pairs 'imaps' <C-h> but i need it
let g:AutoPairsMapCh=0

" from Valloric's vimrc
" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
" from me, wrapped in an augroup
augroup vimrc_group
    autocmd FileType text,markdown,gitcommit set nocindent
augroup END

" SYNTASTIC
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']

" YOUCOMPLETEME
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 1

" ULTISNIPS
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<C-f>"
let g:UltiSnipsJumpBackwardTrigger="<C-b>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

" EASYTAGS
let g:easytags_cmd = '/usr/local/bin/ctags'
let g:easytags_include_members = 1
let g:easytags_resolve_links = 1

highlight def link pythonClassTag Title
highlight def link pythonMethodTag Function
"highlight def link javaMethodTag Function
"highlight def link javaClassTag Type
"highlight def link javaInterfaceTag Keyword


" TAGBAR
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################

"###############################################################################
"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
"           _   _   _
"  ___  ___| |_| |_(_)_ __   __ _ ___
" / __|/ _ \ __| __| | '_ \ / _` / __|
" \__ \  __/ |_| |_| | | | | (_| \__ \
" |___/\___|\__|\__|_|_| |_|\__, |___/
"                           |___/
"
"
"###############################################################################
" Settings|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{

let g:python3_host_prog = '/usr/local/bin/python3'
let g:python_host_prog = '/usr/local/bin/python'

if !has('nvim')
    set ttymouse=xterm2
    set backspace=indent,eol,start
    set encoding=utf-8
endif

if exists('neovim_dot_app')
    echom "setting font"
    call MacSetFont("Hack", 14)
endif

set termencoding=utf-8

set cursorline
set guifont=Hack:h14
set hidden
set history=1000
set incsearch
set laststatus=2
set nobackup
set noerrorbells
set noshowmode
set number
set noswapfile
set nowrap
set pastetoggle=<F3>
set ruler
set showtabline=2
set scrolloff=5
set smartcase
set undofile
set wildmenu

augroup vimrc_group
    au BufRead,BufNewFile *.applescript set filetype=applescript
augroup END

augroup vimrc_group
    autocmd FileType vim setlocal foldmethod=marker|set tabstop=4|set shiftwidth=4|set expandtab| set softtabstop=4
    autocmd FileType c set tabstop=4|set shiftwidth=4|set expandtab| set softtabstop=4
augroup END

augroup vimrc_group
    " autoindent
    autocmd FileType perl set autoindent|set smartindent
    " 4 space tabs
    autocmd FileType perl set tabstop=4|set shiftwidth=4|set expandtab|set softtabstop=4
augroup END

augroup vimrc_group
    autocmd Filetype html set autoindent
    autocmd FileType html set shiftwidth=2
augroup END
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################

"###############################################################################
"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
"   ____ _   _ ___
"  / ___| | | |_ _|
" | |  _| | | || |
" | |_| | |_| || |
"  \____|\___/|___|
"
"
"###############################################################################
" GUI||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
"if has('gui_running')
"" The cursor and cursorline colors
"highlight CursorLine guibg=#232728
"highlight Cursor guibg=magenta guifg=black
"augroup gui_cursor_line
"autocmd!
"autocmd InsertEnter * highlight CursorLine guibg=#00005f
"autocmd InsertLeave * highlight CursorLine guibg=#232728

"autocmd InsertEnter * highlight Cursor guibg=#ff0000
"autocmd InsertLeave * highlight Cursor guibg=magenta guifg=black
"augroup END
"endif

if !has('gui_running')
    set t_Co=256

    "disable 'Background color erase'
    set t_ut=

    " The cursorline colors
    highlight CursorLine ctermbg=234
    augroup vimrc_group
        autocmd InsertEnter * highlight CursorLine ctermbg=17
        autocmd InsertLeave * highlight CursorLine ctermbg=234
    augroup END

    "Change cursor shape between insert and normal mode in iTerm2.app
    if $TERM_PROGRAM =~ "iTerm"
        let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
        let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
    endif

endif

set background=dark
colorscheme Tomorrow-Night-Eighties

let g:molokai_original = 1

let java_highlight_all=1
let python_highlight_all = 1
"let java_highlight_functions = 1
let python_version_2 = 1
augroup vimrc_group
    autocmd FileType python let b:easytags_auto_highlight = 1
    autocmd FileType java let b:easytags_auto_highlight = 1
augroup END


let g:cpp_class_scope_highlight = 1
" Highlight Class and Function names
function! s:HighlightFunctionsAndClasses()
    syn match cCustomFunc      "\w\+\s*\((\)\@="
    hi def link cCustomFunc      Function

    if &filetype =~ 'cpp'
        syn match cCustomClass     "\w\+\s*\(::\)\@="
        hi def link cCustomClass     Keyword
    endif
endfunction

augroup vimrc_group
    au FileType python call s:HighlightFunctionsAndClasses()
    au FileType cpp call s:HighlightFunctionsAndClasses()
augroup END

set guioptions-=T  "remove toolbar
set guioptions-=t  "remove toolbar
set guioptions-=R  "remove right-hand scroll bar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar

let g:airline_theme = 'powerlineish'
let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline_detect_modified=1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#eclim#enabled = 1
let g:airline#extensions#ycm#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1

"set the rightmost section of airline, shows:
"line-numbers / total-line-numbers | column
let g:airline_section_z = '%4l% /%L% |%2v'

"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################


"###############################################################################
"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
"  _              _     _           _ _
" | | _____ _   _| |__ (_)_ __   __| (_)_ __   __ _ ___
" | |/ / _ \ | | | '_ \| | '_ \ / _` | | '_ \ / _` / __|
" |   <  __/ |_| | |_) | | | | | (_| | | | | | (_| \__ \
" |_|\_\___|\__, |_.__/|_|_| |_|\__,_|_|_| |_|\__, |___/
"           |___/                             |___/
"
"
"###############################################################################
" Keybindings||||||||||l||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
if has ('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <f8> <C-\><C-n>:Ttoggle<cr>
endif

augroup vimrc_group
    autocmd Filetype c nnoremap <buffer> <f5> :! ~/Dropbox/code/shell/c-compiler-tmp.sh %<cr>:T /tmp/last-compile-file<cr><cr><C-w>ja
    autocmd Filetype cpp nnoremap <buffer> <f5> :! ~/Dropbox/code/shell/cpp-compiler-tmp.sh %<cr>:T /tmp/last-compile-file<cr><C-w>ja
    autocmd FileType applescript nnoremap <buffer> <f5> :w<cr>:T osascript %<cr><cr>
    autocmd FileType applescript inoremap <buffer> <f5> <esc>:w<cr>:T osascript %<cr><cr>
    autocmd FileType python,julia nnoremap <buffer> <f5> :TREPLSendFile<cr>
    autocmd FileType python,julia nnoremap <buffer> <f6> :TREPLSend<cr>
    autocmd FileType python,julia vnoremap <buffer> <f6> :TREPLSend<cr>
augroup END

nmap <f7> <Plug>AirlineSelectPrevTab
nmap <f9> <Plug>AirlineSelectNextTab
nnoremap <f8> :Ttoggle<cr><C-w>ja
inoremap <f8> <esc>:Ttoggle<cr><C-w>ja
nnoremap <silent> <F10> :TagbarToggle<CR>

inoremap <C-d> <delete>
nnoremap <BS> :

let mapleader = "\<tab>"
let maplocalleader = "\<SPACE>"
nnoremap \ :b#<CR>

"<leader> mappings
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nnoremap <leader>f :YcmCompleter FixIt<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>

nnoremap <localleader>, :e ~/.vimrc<cr>
nnoremap <localleader>. :e ~/.zshrc<cr>
nnoremap <localleader>/ :e ~/.zshenv<cr>

" Comment a line in the filetype's apropriate way
augroup vimrc_group
    autocmd FileType applescript nnoremap <buffer> <localleader>c I--<esc>
    autocmd FileType javascript nnoremap <buffer> <localleader>c I//<esc>
    autocmd FileType c nnoremap <buffer> <localleader>c I//<esc>
    autocmd FileType python     nnoremap <buffer> <localleader>c I#<esc>
    autocmd FileType vim     nnoremap <buffer> <localleader>c I"<esc>
augroup END

nnoremap <localleader>b :Buffers<CR>
nnoremap <localleader>f :FZF<CR>
nnoremap <localleader>k :ColorToggle<CR>
nnoremap <localleader>n :NERDTreeToggle<CR>
nnoremap <localleader>q :wqa<CR>
nnoremap <localleader>r :History<CR>
nnoremap <localleader>s :SyntasticToggleMode<CR>
nnoremap <localleader>w :wincmd p<CR>

"CONTROL-KEY MOVEMENT"
cnoremap <C-j> <down>
cnoremap <C-k> <up>

imap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-j> <Down>
inoremap <C-k> <Up>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

noremap <silent> tw :GhcModTypeInsert<CR>
noremap <silent> ts :GhcModSplitFunCase<CR>
noremap <silent> tq :GhcModType<CR>
noremap <silent> te :GhcModTypeClear<CR>

let g:haskell_tabular = 1

vnoremap a= :Tabularize /=<CR>
vnoremap a; :Tabularize /::<CR>
vnoremap a: :Tabularize /:<CR>
vnoremap a- :Tabularize /-><CR>
vnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
vnoremap <Leader>a, :Tabularize /,/l0r1<CR>

" Abbreviations
augroup vimrc_group
    autocmd FileType python     :iabbrev <buffer> iff if:<left>
    autocmd FileType javascript :iabbrev <buffer> iff if ()<left>
augroup END
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
