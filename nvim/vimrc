" Vim-Plug  PluginSettings  Settings  GUI  Keybindings
"###############################################################################
"        _                       _
" __   _(_)_ __ ___        _ __ | |_   _  __ _
" \ \ / / | '_ ` _ \ _____| '_ \| | | | |/ _` |
"  \ V /| | | | | | |_____| |_) | | |_| | (_| |
"   \_/ |_|_| |_| |_|     | .__/|_|\__,_|\__, |
"                         |_|            |___/
"
"Vim-Plug||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source ~/Desktop/dotfiles/nvim/vimrc
endif

call plug#begin('~/.local/share/nvim/plugged')

Plug 'bronson/vim-trailing-whitespace'
Plug 'dietsche/vim-lastplace'
"
"Plug 'jmcantrell/vim-virtualenv'
"
Plug 'kassio/neoterm'
Plug 'jpalardy/vim-slime'
"
"Plug 'thinca/vim-quickrun'
"
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
"
" Plug 'ryanoasis/vim-devicons'
Plug 'chrisbra/Colorizer'

Plug 'mhartington/oceanic-next'
Plug 'crusoexia/vim-monokai'
Plug 'NLKNguyen/papercolor-theme'
Plug '~/Desktop/tender.vim'
" Plug 'jacoborus/tender.vim'
Plug 'w0ng/vim-hybrid'
Plug 'ajh17/Spacegray.vim'
" Plug 'whatyouhide/vim-gotham'
Plug '~/Desktop/g0tham.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'itchyny/lightline.vim'
" Plug '~/Desktop/tender2.vim'
"
Plug 'tpope/vim-surround'
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
"
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'terryma/vim-multiple-cursors'
"
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'


Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
"
Plug 'scrooloose/nerdtree'
"Plug 'vim-syntastic/syntastic'
"Plug 'dbakker/vim-lint'
"
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neco-vim'
Plug 'Shougo/neoinclude.vim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/echodoc.vim'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
" Plug '~/projects/tern_for_vim', { 'do': 'npm install' }
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer'}
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'rhysd/devdocs.vim'

Plug 'othree/html5.vim'
Plug 'othree/jsdoc-syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'moll/vim-node'
Plug 'elzr/vim-json'
Plug 'othree/yajs.vim'
" Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
" Plug 'vim-scripts/synmark.vim'

Plug 'sentientmachine/Pretty-Vim-Python'
" Plug 'python-mode/python-mode'
" Plug 'hdima/python-syntax'
"Plug 'hynek/vim-python-pep8-indent'
"Plug 'tell-k/vim-autopep8'

"Plug 'JuliaLang/julia-vim'

Plug 'vim-perl/vim-perl'

Plug 'vim-ruby/vim-ruby'

"Plug 'peterhoeg/vim-qml'

Plug 'leafgarland/typescript-vim'
Plug 'HerringtonDarkholme/yats.vim'
" Plug 'mhartington/vim-typings'


Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'justinmk/vim-syntax-extra'
"Plug 'arakashic/chromatica.nvim'
"
"Plug 'itchyny/vim-haskell-indent'
"Plug 'eagletmt/ghcmod-vim'
"Plug 'eagletmt/neco-ghc'
"
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'

if has("macunix")
"    Plug 'vim-scripts/applescript.vim'
    Plug 'junegunn/vim-xmark', { 'do': 'make' }
endif


call plug#end()
filetype plugin indent on
syntax on

"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
"        _             _                  _   _   _
"  _ __ | |_   _  __ _(_)_ __    ___  ___| |_| |_(_)_ __   __ _ ___
" | '_ \| | | | |/ _` | | '_ \  / __|/ _ \ __| __| | '_ \ / _` / __|
" | |_) | | |_| | (_| | | | | | \__ \  __/ |_| |_| | | | | (_| \__ \
" | .__/|_|\__,_|\__, |_|_| |_| |___/\___|\__|\__|_|_| |_|\__, |___/
" |_|            |___/                                    |___/
"
"PluginSettings||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
"start an autocmd group for vimrc and clear it, so that you can
"source your vimrc after you've changed it. And not have your
"autocmd's defined multiple times.
augroup vimrc_group
    autocmd!
augroup END

" VIM-TRAILING-WHITESPACE
highlight ExtraWhitespace guibg=#ffeeee
autocmd ColorScheme * highlight ExtraWhitespace guibg=#ffeeee

" VIM-SLIME
let g:slime_python_ipython = 1
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
let g:slime_dont_ask_default = 1

"NEOTERM
let g:neoterm_keep_term_open = 1
let g:neoterm_autoinsert = 1
" let g:neoterm_automap_keys = '<localleader>tt'

" NERDTREE
let NERDTreeHijackNetrw=1
let NERDTreeQuitOnOpen=1

" AUTO-PAIRS
" auto-pairs 'imaps' <C-h> but i need it
let g:AutoPairsMapCh=0
let g:AutoPairsShortcutFastWrap = '<M-w>'
" let g:AutoPairsShortcutJump = '<C-j>'

" from Valloric's vimrc
" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
" from me, wrapped in an augroup
"augroup vimrc_group
"    autocmd FileType text,markdown,gitcommit set nocindent
"augroup END
"
" SYNTASTIC
"let g:syntastic_error_symbol = '✗'
"let g:syntastic_warning_symbol = '⚠'
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args = "--ignore F401,E402,E201,E202,E111,E251,E303"
" let g:syntastic_html_checkers = ['validator']
"let g:syntastic_html_tidy_exec = '/usr/local/bin/tidy'
"let g:syntastic_javascript_checkers= ['eslint']
"let g:syntastic_typescript_checkers = ['tsuquyomi']

" JS-LIBRARIES-SYNTAX
let g:used_javascript_libs = 'react,jquery,underscore,backbone,chai'

" enable deoplete
let g:deoplete#enable_at_startup = 1
let g:echodoc_enable_at_startup	= 1
let g:deoplete#auto_complete_delay = 25
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
set splitbelow

" TERN-FOR-VIM
let g:tern_map_keys = 1
let g:tern_show_signature_in_pum = 1

" DEOPLETE-TERNJS
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

" YOUCOMPLETEME
let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_cache_omnifunc = 1
let g:ycm_min_num_of_chars_for_completion = 1

let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::', '"', "'", 'use ', 'namespace ', '\'],
            \   'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
            \   'javascript': ['.'],
            \   'html': ['<', '"', '</', ' '],
            \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \   'haskell' : ['.', 're!.']
            \ }

autocmd FileType javascript,javascript.jsx,jsx setlocal omnifunc=tern#Complete
" let g:tsuquyomi_ignore_missing_module = 1
" let g:tsuquyomi_javascript_support = 1
" let g:tsuquyomi_completion_detail = 1

" ULTISNIPS
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<C-s>"
let g:UltiSnipsJumpForwardTrigger="<C-f>"
let g:UltiSnipsJumpBackwardTrigger="<C-b>"
"
"" CHROMATICA
"if has("macunix")
"    let g:chromatica#libclang_path='/usr/local/opt/llvm/lib'
"else
"    let g:chromatica#libclang_path='/usr/lib/llvm-3.8/lib'
"endif

" PYMODE
let g:pymode_folding = 0
let python_highlight_all = 1

"let g:chromatica#enable_at_startup = 1
"let g:chromatica#highlight_feature_level = 1
"
"" QUICKRUN
"let g:quickrun_config = {}
"let g:quickrun_config.python = {
"            \   'outputter': 'loclist',
"            \   'command': 'python'
"            \}
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
"           _   _   _
"  ___  ___| |_| |_(_)_ __   __ _ ___
" / __|/ _ \ __| __| | '_ \ / _` / __|
" \__ \  __/ |_| |_| | | | | (_| \__ \
" |___/\___|\__|\__|_|_| |_|\__, |___/
"                           |___/
"
" Settings|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
if has("macunix")
    let g:python3_host_prog = '/usr/local/bin/python3'
    let g:python_host_prog = '/usr/local/bin/python'
else
    let g:python3_host_prog = '/usr/bin/python3'
    let g:python_host_prog = '/usr/bin/python'
endif
"
"if !has('nvim')
"    set ttymouse=xterm2
"    set backspace=indent,eol,start
"    set encoding=utf-8
"endif

"if exists('neovim_dot_app')
"    echom "setting font"
"    call MacSetFont("SauceCodePro Nerd Font", 11)
"endif

set cursorline
" set guifont=Hack:h14
set hidden
set history=1000
set incsearch
set laststatus=2
set nobackup
set noerrorbells
set noshowmode
set number
set noswapfile
set nowrap
set pastetoggle=<F3>
set ruler
set showtabline=1
set scrolloff=5
set smartcase
set ignorecase
set undofile
set wildmenu
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
"
"if has('autocmd')
"    function! ILikeHelpToTheRight()
"        if !exists('w:help_is_moved') || w:help_is_moved != "right"
"            wincmd L
"            let w:help_is_moved = "right"
"        endif
"    endfunction
"
"    augroup vimrc_group
"        autocmd FileType help call ILikeHelpToTheRight()
"    augroup END
"endif

augroup vimrc_group
    au BufRead,BufNewFile *.applescript set filetype=applescript
augroup END

augroup vimrc_group
    autocmd FileType vim setlocal foldmethod=marker|set tabstop=2|set shiftwidth=2|set expandtab| set softtabstop=2
    autocmd FileType c,cpp,objc set tabstop=2|set shiftwidth=2|set noexpandtab| set softtabstop=2
augroup END

augroup vimrc_group
    " autoindent
    autocmd FileType perl set autoindent|set smartindent
    " 4 space tabs
    autocmd FileType perl set tabstop=2|set shiftwidth=2|set expandtab|set softtabstop=2
augroup END

augroup vimrc_group
    " autocmd Filetype html set autoindent
    autocmd FileType html,javascript,javascript.jsx,jsx set shiftwidth=2|set softtabstop=2|set tabstop=2|set expandtab
augroup END
set tags+=./
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
"   ____ _   _ ___
"  / ___| | | |_ _|
" | |  _| | | || |
" | |_| | |_| || |
"  \____|\___/|___|
"
" GUI||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
"if has('gui_running')
" The cursor and cursorline colors
"highlight CursorLine guibg=#232728
"highlight Cursor guibg=magenta guifg=black
"augroup gui_cursor_line
"autocmd!
"autocmd InsertEnter * highlight CursorLine guibg=#00005f
"autocmd InsertLeave * highlight CursorLine guibg=#232728

"autocmd InsertEnter * highlight Cursor guibg=#ff0000
"autocmd InsertLeave * highlight Cursor guibg=magenta guifg=black
"augroup END
"endif

"if !has('gui_running')
"    set t_Co=256
"
"    "disable 'Background color erase'
"    set t_ut=
"
"    " The cursorline colors
"    highlight CursorLine ctermbg=234
"    augroup vimrc_group
"        autocmd InsertEnter * highlight CursorLine ctermbg=17
"        autocmd InsertLeave * highlight CursorLine ctermbg=234
"    augroup END
"
"    endif
"
"endif

set background=dark

" on linux this has been causing problems
"
if (has("termguicolors"))
    set termguicolors
endif

colorscheme g0tham
let g:airline_theme = 'g0tham'

let g:airline_powerline_fonts = 1

let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V-LINE',
            \ '' : 'V-BLOCK',
            \ 's'  : 'S',
            \ 'S'  : 'S-LINE',
            \ '' : 'S-BLOCK',
            \ }

let g:airline_left_sep =''
let g:airline_right_sep =''
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#right_sep = ''

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers= 1
let g:airline#extensions#tabline#buffer_idx_mode = 1


let g:airline#extensions#branch#enabled = 1
" let g:airline#extensions#syntastic#enabled = 1
"let g:airline#extensions#virtualenv#enabled = 1
"let g:airline#extensions#eclim#enabled = 1
" let g:airline#extensions#ycm#enabled = 1

" set the rightmost section of airline, shows:
" line-numbers / total-line-numbers | column
let g:airline_section_z = '%4l% /%L% |%2v'

"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
"  _              _     _           _ _
" | | _____ _   _| |__ (_)_ __   __| (_)_ __   __ _ ___
" | |/ / _ \ | | | '_ \| | '_ \ / _` | | '_ \ / _` / __|
" |   <  __/ |_| | |_) | | | | | (_| | | | | | (_| \__ \
" |_|\_\___|\__, |_.__/|_|_| |_|\__,_|_|_| |_|\__, |___/
"           |___/                             |___/
"
" Keybindings|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||{{{
augroup vimrc_group
    autocmd Filetype c nnoremap <buffer> <f5> :! ~/Dropbox/code/shell/c-compiler-tmp.sh %<cr>:T /tmp/last-compile-file<cr><cr><C-w>ja
    autocmd Filetype cpp nnoremap <buffer> <f5> :! ~/Dropbox/code/shell/cpp-compiler-tmp.sh %<cr>:T /tmp/last-compile-file<cr><C-w>ja

    autocmd FileType applescript nnoremap <buffer> <f5> :w<cr>:T osascript %<cr><cr>
    autocmd FileType applescript inoremap <buffer> <f5> <esc>:w<cr>:T osascript %<cr><cr>

    autocmd FileType typescript nnoremap <buffer> <f5> :w<cr>:! tsc %<cr><cr>
    autocmd FileType typescript nnoremap <buffer> <f6> :w<cr>:T node %:r.js<cr>
    autocmd FileType typescript inoremap <buffer> <f5> <esc>:w<cr>:! tsc %<cr><cr>

    autocmd FileType javascript nnoremap <buffer> <f5> :TREPLSendFile<cr>
    autocmd FileType javascript nnoremap <buffer> <f6> :T node %<cr>

    autocmd FileType python,julia nnoremap <buffer> <f5> :TREPLSendFile<cr>
    autocmd FileType python,julia nnoremap <buffer> <f6> :TREPLSend<cr>
    autocmd FileType python,julia vnoremap <buffer> <f6> :TREPLSend<cr>
    autocmd Filetype python map <buffer> <leader>p :call Autopep8()<CR>
augroup END

nmap <f7> <Plug>AirlineSelectPrevTab
nmap <f9> <Plug>AirlineSelectNextTab

if has ('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <f8> <C-\><C-n>:TerminalTogggle<cr>
endif

nnoremap <f8> :TerminalTogggle<cr>
inoremap <f8> <esc>:TerminalTogggle<cr>

function! SplitForTerminal()
    let l:height = winheight(0) * 3
    let l:width = winwidth(0)
    if (l:height > l:width)
        Tpos horizontal
        Topen
        execute "normal! \<C-w>ja"
    else
        Tpos vertical
        Topen
        execute "normal! \<C-w>la"
    endif
endfunction

let g:term_is_open = 0
function! TerminalToggle()
    if exists('g:term_is_open')
        if g:term_is_open
            echom "leaving terminal"
            let g:term_is_open = 0
            Tclose
        else
            echom "opening terminal"
            let g:term_is_open = 1
            call SplitForTerminal()
        endif
    else
        echo "no variable 'g:term_is_open' exists"
    endif
endfunction
command! TerminalTogggle call TerminalToggle()


nnoremap <BS> :
nnoremap q <nop>
nnoremap Q <nop>

let mapleader = "\<CR>"
let maplocalleader = "\<SPACE>"
nnoremap <tab> :b#<CR>
nnoremap \ :DevDocsUnderCursor<CR>
augroup vimrc_group
  autocmd Filetype vim nnoremap <buffer> \ "zyiw:exe "h ".@z.""<CR>
augroup END

" <leader> mappings
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nnoremap <leader>f :YcmCompleter FixIt<CR>
nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>[ :lpr<CR>
nnoremap <leader>] :lne<CR>

nnoremap <localleader>, :e ~/Desktop/vimrc<cr>
if has("macunix")
    nnoremap <localleader>. :e ~/Desktop/dotfiles/osx/zsh/zshrc<cr>
    nnoremap <localleader>/ :e ~/Desktop/dotfiles/osx/zsh/zshenv<cr>
else
    nnoremap <localleader>. :e ~/Desktop/dotfiles/linux/zsh/zshrc<cr>
    nnoremap <localleader>/ :e ~/Desktop/dotfiles/linux/zsh/zshenv<cr>
endif


" Comment a line in the filetype's apropriate way
augroup vimrc_group
    autocmd FileType applescript nnoremap <buffer> <localleader>c I--<space><esc>
    autocmd FileType c,cpp,objc,javascript nnoremap <buffer> <localleader>c I//<space><esc>
    autocmd FileType python,perl,zsh nnoremap <buffer> <localleader>c I#<space><esc>
    autocmd FileType vim noremap <buffer> <localleader>c I"<space><esc>
augroup END

nnoremap <localleader>b :Buffers<CR>
" nnoremap <localleader>f "zyiw:exe "h ".@z.""<CR>
nnoremap <localleader>h :History<CR>
nnoremap <localleader>k :ColorToggle<CR>
nnoremap <localleader>l <C-l>
nnoremap <localleader>n :NERDTreeToggle<CR>
nnoremap <localleader>p :FZF<CR>
nnoremap <localleader>q :wqa<CR>
nnoremap <localleader>r :mode<CR>
nnoremap <localleader>s :SyntasticToggleMode<CR>
nnoremap <localleader>w :wincmd p<CR>

"CONTROL-KEY MOVEMENT"
cnoremap <C-j> <down>
cnoremap <C-k> <up>

inoremap <C-d> <delete>
inoremap <C-k> <C-o>d$
inoremap <C-u> <C-o>d^<C-o>x

inoremap <C-a> <C-o>I
inoremap <C-e> <C-o>A

inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-n> <Down>
inoremap <C-p> <Up>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <silent> tw :GhcModTypeInsert<CR>
nnoremap <silent> ts :GhcModSplitFunCase<CR>
nnoremap <silent> tq :GhcModType<CR>
nnoremap <silent> te :GhcModTypeClear<CR>

let g:haskell_tabular = 1

vnoremap a= :Tabularize /=<CR>
vnoremap a; :Tabularize /::<CR>
vnoremap a: :Tabularize /:<CR>
vnoremap a- :Tabularize /-><CR>
vnoremap <Leader>a/ :Tabularize /\/\//l2c1l0<CR>
vnoremap <Leader>a, :Tabularize /,/l0r1<CR>

" Abbreviations
augroup vimrc_group
    autocmd FileType python     :iabbrev <buffer> iff if:<left>
    autocmd FileType javascript,c,cpp,objc :iabbrev <buffer> iff if ()<left>
augroup END
"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}}}
"###############################################################################
